{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Friendly Interactive Shell (fish)",
  "scopeName": "source.shell.fish",
  "fileTypes": [
    "fish"
  ],
  "uuid": "73fe8880-b0d7-4073-8543-e923d65dad79",
  "firstLineMatch": "^#!.*\\b(fish)\\b",
  "foldingStartMarker": "(;|^)\\s*(begin|for|function|if|switch|while)\\b.*$",
  "foldingStopMarker": "(;|^)\\s*end\\b.*$",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#line-continuation"
    },
    {
      "name": "invalid.illegal.function-call.fish",
      "begin": "\\)|end",
      "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])"
    },
    {
      "name": "invalid.illegal.operator.fish",
      "match": "\\&"
    },
    {
      "begin": "(?=\\S)",
      "end": "(\\n)|(;)|((?<!&)&(?!&))|(?=\\)|#|end)",
      "endCaptures": {
        "1": {
          "name": "meta.function-call.operator.control.newline.fish"
        },
        "2": {
          "name": "meta.function-call.operator.control.semicolon.fish keyword.operator.control.fish"
        },
        "3": {
          "name": "meta.function-call.operator.control.ampersand.fish keyword.operator.control.fish"
        }
      },
      "patterns": [
        {
          "include": "#pipeline"
        }
      ]
    }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "name": "comment.line.fish",
          "begin": "\\#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.fish"
            }
          },
          "end": "\\n"
        }
      ]
    },
    "line-continuation": {
      "patterns": [
        {
          "begin": "(?=\\\\\\n)",
          "end": "(?=\\n)|^(?![\\s\\#\\\\])|\\s(?![\\s\\#])",
          "patterns": [
            {
              "name": "constant.character.escape.newline.fish",
              "match": "\\\\\\n"
            },
            {
              "include": "#comment"
            }
          ]
        }
      ]
    },
    "pipeline": {
      "patterns": [
        {
          "include": "#command-call-environment"
        },
        {
          "include": "#separator-whitespace"
        },
        {
          "include": "#line-continuation"
        },
        {
          "begin": "(?=(and|or)\\b(?!\\s*[\\n\\)#;-]))",
          "end": "(?=[\\n\\)#]|;|&(?![|>]))",
          "patterns": [
            {
              "begin": "(and|or)\\b(?!\\s*[\\n\\);-])",
              "beginCaptures": {
                "1": {
                  "name": "meta.function-call.name.fish keyword.operator.word.fish meta.string.unquoted.fish"
                }
              },
              "end": "(?![^\\n\\S]|\\&|\\\\\\n)",
              "patterns": [
                {
                  "include": "#separator-whitespace"
                },
                {
                  "name": "invalid.illegal.operator.fish",
                  "match": "\\&"
                },
                {
                  "include": "#line-continuation"
                }
              ]
            },
            {
              "include": "#pipeline"
            }
          ]
        },
        {
          "include": "#pipeline-segment"
        }
      ]
    },
    "pipeline-segment": {
      "patterns": [
        {
          "begin": "(?=[&\\|]|(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&>>?)",
          "end": "(?=\\n)|(?!\\s*(?:[\\n\\)#]|;|&(?![|>])|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\||(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&>>?))",
          "patterns": [
            {
              "name": "invalid.illegal.operator.fish",
              "match": "(?:(?<!&)&(?!&)|(?<!\\|)\\|(?!\\|)|(?:[0-9]+)?(?:<|>>?)|\\^\\^?)"
            }
          ]
        },
        {
          "name": "invalid.illegal.function-call.fish",
          "match": "(?:case|else|end)(?=[[^\\n\\S]\\n\\);&\\|<>])"
        },
        {
          "begin": "(?=[^\\s#])",
          "end": "(?=[\\n\\)#]|;|&(?![|>]))(?!&&)",
          "patterns": [
            {
              "begin": "(?![\\s#&]|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\|)",
              "end": "(?=[\\n\\)#]|;|&(?![|>])|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\|)",
              "patterns": [
                {
                  "include": "#command-call-meta"
                },
                {
                  "include": "#command-call-standard"
                }
              ]
            },
            {
              "begin": "(?=&&|\\|\\||(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\|)",
              "end": "(?=[\\n\\)#]|;|&(?![|>]))",
              "patterns": [
                {
                  "name": "invalid.illegal.operator.fish",
                  "match": "(?:&&|\\|\\|)(?=\\s*[\\);&\\|])"
                },
                {
                  "name": "invalid.illegal.operator.fish",
                  "match": "(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\|(?=\\s*[\\);&])"
                },
                {
                  "begin": "(?x)\n(?:\n  ([0-9]+)?([<>]|>>?)\n  |\n  (\\^\\^?)\n)?\n(\\|)",
                  "captures": {
                    "0": {
                      "name": "meta.function-call.operator.pipe.fish"
                    },
                    "1": {
                      "name": "constant.numeric.file-descriptor.fish"
                    },
                    "2": {
                      "name": "keyword.operator.pipe.redirect.fish"
                    },
                    "3": {
                      "name": "keyword.operator.pipe.redirect.fish"
                    },
                    "4": {
                      "name": "keyword.operator.pipe.fish"
                    }
                  },
                  "end": "(?=[\\n\\)#]|;|&(?![|>]))|(?:(&&)|(\\|\\|))|(?=.)",
                  "endCaptures": {
                    "1": {
                      "name": "meta.function-call.operator.control.double-ampersand.fish keyword.operator.control.fish"
                    },
                    "2": {
                      "name": "meta.function-call.operator.control.double-bar.fish keyword.operator.control.fish"
                    }
                  },
                  "patterns": [
                    {
                      "name": "invalid.illegal.function-call.fish",
                      "match": "(and|or)\\b(?!\\s*[\\n;-])"
                    },
                    {
                      "include": "#separator-whitespace"
                    },
                    {
                      "include": "#line-continuation"
                    },
                    {
                      "include": "#comment"
                    },
                    {
                      "name": "meta.function-call.operator.control.newline.ignored.fish",
                      "match": "\\n"
                    },
                    {
                      "include": "#pipeline-segment"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "command-call-environment": {
      "patterns": [
        {
          "name": "meta.function-call.environment.fish",
          "begin": "(?=[\\w]+=)",
          "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])|(?:\\S+?|\\(.*\\))(?=\\s*[\\n;&\\|<>])",
          "endCaptures": {
            "1": {
              "name": "invalid.illegal.function-call.fish"
            }
          },
          "patterns": [
            {
              "include": "#parameter-common"
            },
            {
              "name": "keyword.operator.assignment.fish",
              "match": "="
            },
            {
              "name": "variable.parameter.fish meta.string.unquoted.fish",
              "match": "(?=\\=)"
            }
          ]
        }
      ]
    },
    "command-call-meta": {
      "patterns": [
        {
          "begin": "(?:builtin|command|exec)\\b(?!\\s*(?:[\\n\\)#]|;|&(?![|>])|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\||(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&>>?|-))",
          "beginCaptures": {
            "0": {
              "name": "meta.function-call.name.fish support.function.fish meta.string.unquoted.fish"
            }
          },
          "end": "(?=[\\n\\)#]|;|&(?![|>])|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\|)",
          "patterns": [
            {
              "include": "#separator-whitespace"
            },
            {
              "include": "#line-continuation"
            },
            {
              "include": "#command-call-standard"
            }
          ]
        },
        {
          "name": "meta.function-call.name.fish support.function.fish meta.string.unquoted.fish",
          "begin": "time\\b",
          "end": "(?=[\\n\\)#]|;|&(?![|>])|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\|)",
          "patterns": [
            {
              "include": "#separator-whitespace"
            },
            {
              "include": "#line-continuation"
            },
            {
              "include": "#command-call-standard"
            }
          ]
        },
        {
          "begin": "(?=(not|!)[^\\n\\S](?!\\s*[\\n\\)#;-]))",
          "end": "(?=[\\n\\)#]|;|&(?![|>]))",
          "patterns": [
            {
              "begin": "((not)|(!))(?=[^\\n\\S](?!\\s*[\\n\\)#;-]))",
              "beginCaptures": {
                "1": {
                  "name": "meta.function-call.name.fish"
                },
                "2": {
                  "name": "keyword.operator.word.not.fish meta.string.unquoted.fish"
                },
                "3": {
                  "name": "keyword.operator.word.bang.fish meta.string.unquoted.fish"
                }
              },
              "end": "(?![^\\n\\S]|\\&|\\\\\\n)",
              "patterns": [
                {
                  "include": "#separator-whitespace"
                },
                {
                  "name": "invalid.illegal.function-call.fish",
                  "match": "\\&"
                },
                {
                  "include": "#line-continuation"
                }
              ]
            },
            {
              "include": "#pipeline"
            }
          ]
        }
      ]
    },
    "command-call-standard": {
      "patterns": [
        {
          "begin": "(?=\\S)",
          "end": "(?x)\n(?=\n  (?:\n    [\\n)#;&]\n  |\n    (?:(?:[0-9]+)?(?:<|>>?)|\\^\\^?)?\\|\n  )\n)",
          "patterns": [
            {
              "begin": "(?![\\s<>^%])",
              "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
              "patterns": [
                {
                  "include": "#command-call-standard-block"
                },
                {
                  "begin": "\\[(?=[\\s<>]|\\\\\\n)",
                  "beginCaptures": {
                    "0": {
                      "name": "meta.function-call.name.fish support.function.test.begin.fish"
                    }
                  },
                  "end": "(\\])|(\\n|[;&)|].*)",
                  "endCaptures": {
                    "1": {
                      "name": "meta.function-call.name.fish support.function.test.end.fish"
                    },
                    "2": {
                      "name": "invalid.illegal.function-call.fish"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#separator-whitespace"
                    },
                    {
                      "include": "#line-continuation"
                    },
                    {
                      "include": "#parameter"
                    },
                    {
                      "include": "#redirection"
                    }
                  ]
                },
                {
                  "match": "(?:break|continue|return)(?=[[^\\n\\S]\\n\\);&\\|<>])",
                  "captures": {
                    "0": {
                      "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
                    }
                  }
                },
                {
                  "begin": "(?!\\s)",
                  "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
                  "patterns": [
                    {
                      "name": "invalid.illegal.function-call.fish",
                      "begin": "(?=\\()",
                      "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
                      "patterns": [
                        {
                          "begin": "\\(",
                          "end": "\\)|(?=[\\n;&\\|<>])"
                        }
                      ]
                    },
                    {
                      "name": "meta.function-call.name.fish variable.function.fish",
                      "begin": "(?!\\s)",
                      "end": "(?=[[^\\n\\S]\\n\\);&\\|<>(])",
                      "patterns": [
                        {
                          "name": "meta.string.unquoted.fish",
                          "match": "\\$"
                        },
                        {
                          "include": "#string"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "invalid.illegal.function-call.fish",
              "match": "\\%[^[^\\n\\S]\\n\\);&\\|<>]*(?=[[^\\n\\S]\\n\\);&\\|<>])"
            },
            {
              "include": "#redirection"
            },
            {
              "begin": "(?=[^\\n\\S]+)",
              "end": "(?=[\\n\\)#]|;|&(?![|>])|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\|)",
              "patterns": [
                {
                  "begin": "(?!--[[^\\n\\S]\\n\\);&\\|<>])",
                  "end": "(?x)\n(?=\n  (?:\n    [\\n\\)#]|;|&(?![|>])|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\|\n  |\n    --[[^\\n\\S]\\n\\);&\\|<>]\n  )\n)",
                  "patterns": [
                    {
                      "include": "#separator-whitespace"
                    },
                    {
                      "include": "#line-continuation"
                    },
                    {
                      "include": "#redirection"
                    },
                    {
                      "include": "#parameter"
                    }
                  ]
                },
                {
                  "begin": "(?=--[[^\\n\\S]\\n\\);&\\|<>])",
                  "end": "(?=[\\n\\)#]|;|&(?![|>])|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\|)",
                  "patterns": [
                    {
                      "begin": "(?=--[[^\\n\\S]\\n\\);&\\|<>])",
                      "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
                      "patterns": [
                        {
                          "include": "#parameter"
                        }
                      ]
                    },
                    {
                      "begin": "(?=\\s)",
                      "end": "(?=[\\n\\)#]|;|&(?![|>])|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\|)",
                      "patterns": [
                        {
                          "include": "#separator-whitespace"
                        },
                        {
                          "include": "#line-continuation"
                        },
                        {
                          "include": "#redirection"
                        },
                        {
                          "include": "#argument"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "command-call-standard-block": {
      "patterns": [
        {
          "match": "(begin|while|if|for|switch|function)\\s*([&\\|<>]+)",
          "captures": {
            "1": {
              "name": "meta.function-call.name.fish variable.function.fish meta.string.unquoted.fish"
            },
            "2": {
              "name": "invalid.illegal.operator.fish"
            }
          }
        },
        {
          "match": "(begin)\\s*(\\))",
          "captures": {
            "1": {
              "name": "meta.function-call.name.fish variable.function.fish meta.string.unquoted.fish"
            },
            "2": {
              "name": "invalid.illegal.operator.fish"
            }
          }
        },
        {
          "name": "meta.block.begin.fish",
          "begin": "begin(?=\\s*$|\\s*[\\n;]|\\s+[^\\s-])",
          "beginCaptures": {
            "0": {
              "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
            }
          },
          "end": "end(?=$|[[^\\n\\S]\\n\\);&\\|<>])",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.block.while.fish",
          "begin": "(?=while\\s+[^\\n\\)#;-])",
          "end": "end(?=$|[[^\\n\\S]\\n\\);&\\|<>])",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
            }
          },
          "patterns": [
            {
              "begin": "while",
              "beginCaptures": {
                "0": {
                  "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
                }
              },
              "end": "(?=[[\\n\\)#]|;|&(?![|>])])",
              "patterns": [
                {
                  "include": "#line-continuation"
                },
                {
                  "include": "#pipeline"
                }
              ]
            },
            {
              "begin": "(\\n)|(;)|(?=[#)&])",
              "beginCaptures": {
                "1": {
                  "name": "meta.function-call.operator.control.newline.fish"
                },
                "2": {
                  "name": "meta.function-call.operator.control.semicolon.fish keyword.operator.control.fish"
                }
              },
              "end": "(?=end(?:$|[[^\\n\\S]\\n\\);&\\|<>]))",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.block.if.fish",
          "begin": "(?=if\\s+[^\\n\\)#;-])",
          "end": "end(?=$|[[^\\n\\S]\\n\\);&\\|<>])",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
            }
          },
          "patterns": [
            {
              "include": "#command-call-standard-block-if-internal"
            }
          ]
        },
        {
          "name": "meta.block.for-in.fish",
          "begin": "(?=for\\s+[^\\n\\)#;-])",
          "end": "end(?=$|[[^\\n\\S]\\n\\);&\\|<>])",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
            }
          },
          "patterns": [
            {
              "begin": "(for)(\\s+)",
              "beginCaptures": {
                "1": {
                  "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
                },
                "2": {
                  "name": "meta.function-call.fish"
                }
              },
              "end": "\\s+",
              "endCaptures": {
                "0": {
                  "name": "meta.function-call.fish"
                }
              },
              "patterns": [
                {
                  "name": "meta.function-call.parameter.argument.fish",
                  "begin": "(?![[^\\n\\S]\\n\\);&\\|<>])",
                  "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
                  "patterns": [
                    {
                      "include": "#line-continuation"
                    },
                    {
                      "include": "#command-substitution"
                    },
                    {
                      "name": "meta.string.unquoted.fish",
                      "begin": "(?=\\$)",
                      "end": "(?!\\$)",
                      "patterns": [
                        {
                          "include": "#variable-expansion"
                        }
                      ]
                    },
                    {
                      "include": "#string-quoted"
                    },
                    {
                      "name": "meta.string.unquoted.fish",
                      "match": "\\w"
                    },
                    {
                      "name": "invalid.illegal.string.fish",
                      "match": "."
                    }
                  ]
                },
                {
                  "name": "invalid.illegal.operator.fish",
                  "match": "\\S+"
                }
              ]
            },
            {
              "include": "#line-continuation"
            },
            {
              "begin": "in(?=\\s)",
              "beginCaptures": {
                "0": {
                  "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
                }
              },
              "end": "(?=[\\n\\)#]|;|&(?![|>])|\\|)",
              "patterns": [
                {
                  "include": "#separator-whitespace"
                },
                {
                  "include": "#line-continuation"
                },
                {
                  "include": "#parameter-argument"
                }
              ]
            },
            {
              "begin": "(\\n)|(;)|(?=[)#])",
              "beginCaptures": {
                "1": {
                  "name": "meta.function-call.operator.control.newline.fish"
                },
                "2": {
                  "name": "meta.function-call.operator.control.semicolon.fish keyword.operator.control.fish"
                }
              },
              "end": "(?=end(?:$|[[^\\n\\S]\\n\\);&\\|<>]))",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            {
              "name": "invalid.illegal.function-call.fish",
              "match": "\\S+?"
            },
            {
              "include": "#separator-whitespace"
            }
          ]
        },
        {
          "name": "meta.block.switch.fish",
          "begin": "(?=switch\\s+[^\\n\\)#;-])",
          "end": "end(?=$|[[^\\n\\S]\\n\\);&\\|<>])",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
            }
          },
          "patterns": [
            {
              "begin": "(?=switch)",
              "end": "(?=[\\n\\)#;])",
              "patterns": [
                {
                  "begin": "(switch)(\\s+)",
                  "beginCaptures": {
                    "1": {
                      "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
                    },
                    "2": {
                      "name": "meta.function-call.fish"
                    }
                  },
                  "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
                  "patterns": [
                    {
                      "include": "#line-continuation"
                    },
                    {
                      "include": "#parameter-argument"
                    },
                    {
                      "name": "invalid.illegal.operator.fish",
                      "match": "\\S+"
                    }
                  ]
                },
                {
                  "begin": "\\s+",
                  "beginCaptures": {
                    "0": {
                      "name": "meta.function-call.fish"
                    }
                  },
                  "end": "(?=[\\n\\)#;])",
                  "patterns": [
                    {
                      "name": "invalid.illegal.string.fish",
                      "match": "\\S+?"
                    }
                  ]
                }
              ]
            },
            {
              "begin": "(\\n)|(;)|(?=[#)])",
              "beginCaptures": {
                "1": {
                  "name": "meta.function-call.operator.control.fish"
                },
                "2": {
                  "name": "meta.function-call.operator.control.fish keyword.operator.control.fish"
                }
              },
              "end": "(?=end(?:$|[[^\\n\\S]\\n\\);&\\|<>]))",
              "patterns": [
                {
                  "begin": "case(?=[[^\\n\\S]\\n\\);&])",
                  "beginCaptures": {
                    "0": {
                      "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
                    }
                  },
                  "end": "(\\n)|(;)|(?=[)#&\\|]|(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&>>?)",
                  "endCaptures": {
                    "1": {
                      "name": "meta.function-call.operator.control.newline.fish"
                    },
                    "2": {
                      "name": "meta.function-call.operator.control.semicolon.fish keyword.operator.control.fish"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#separator-whitespace"
                    },
                    {
                      "include": "#line-continuation"
                    },
                    {
                      "include": "#parameter-argument"
                    }
                  ]
                },
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.block.function.fish",
          "begin": "(?=function\\s+[^\\n\\)#;-])",
          "end": "end(?=$|[[^\\n\\S]\\n\\);&\\|<>])",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
            }
          },
          "patterns": [
            {
              "begin": "(?=function)",
              "end": "(?=[\\n\\)#]|;|&(?![|>])|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\||(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&>>?)",
              "patterns": [
                {
                  "begin": "(function)\\s+",
                  "beginCaptures": {
                    "0": {
                      "name": "meta.function-call.name.fish"
                    },
                    "1": {
                      "name": "keyword.control.conditional.fish meta.string.unquoted.fish"
                    }
                  },
                  "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
                  "patterns": [
                    {
                      "include": "#line-continuation"
                    },
                    {
                      "name": "invalid.illegal.string.fish",
                      "begin": "[|<>]",
                      "end": "(?=[\\s);&])"
                    },
                    {
                      "begin": "(?!\\\\\\n)",
                      "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
                      "patterns": [
                        {
                          "name": "meta.function-call.parameter.argument.fish entity.name.function.fish",
                          "begin": "(?![[^\\n\\S]\\n\\)])",
                          "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
                          "patterns": [
                            {
                              "include": "#parameter-common"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "begin": "(?=[^\\n\\S])",
                  "end": "(?=[\\n\\)#]|;|&(?![|>])|(?:(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&)?\\||(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&>>?)",
                  "patterns": [
                    {
                      "include": "#separator-whitespace"
                    },
                    {
                      "include": "#line-continuation"
                    },
                    {
                      "include": "#parameter"
                    }
                  ]
                }
              ]
            },
            {
              "begin": "(\\n)|(;)|(?=[)#&\\|]|(?:[0-9]+)?(?:[<>]|>>)|\\^\\^?|&>>?)",
              "beginCaptures": {
                "1": {
                  "name": "meta.function-call.operator.control.newline.fish"
                },
                "2": {
                  "name": "meta.function-call.operator.control.semicolon.fish keyword.operator.control.fish"
                }
              },
              "end": "(?=end(?:$|[[^\\n\\S]\\n\\);&\\|<>]))",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        }
      ]
    },
    "command-call-standard-block-if-internal": {
      "patterns": [
        {
          "begin": "(?=if(?:\\s*\\n|\\s+[^\\s;]))",
          "end": "(?=end(?:$|[[^\\n\\S]\\n\\);&\\|<>]))",
          "patterns": [
            {
              "begin": "if",
              "beginCaptures": {
                "0": {
                  "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
                }
              },
              "end": "(?=[\\n#;&])",
              "patterns": [
                {
                  "include": "#line-continuation"
                },
                {
                  "include": "#pipeline"
                }
              ]
            },
            {
              "begin": "(\\n)|(;)|(?=[#&])",
              "beginCaptures": {
                "1": {
                  "name": "meta.function-call.operator.control.newline.fish"
                },
                "2": {
                  "name": "meta.function-call.operator.control.semicolon.fish keyword.operator.control.fish"
                }
              },
              "end": "(?=end(?:$|[[^\\n\\S]\\n\\);&\\|<>]))",
              "patterns": [
                {
                  "begin": "(?=else\\s*[\\s;])",
                  "end": "(?=end(?:$|[[^\\n\\S]\\n\\);&\\|<>]))",
                  "patterns": [
                    {
                      "begin": "else(?=\\s*[\\s;])",
                      "beginCaptures": {
                        "0": {
                          "name": "meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish"
                        }
                      },
                      "end": "(?=[\\n#;&\\|]|if(?:\\s*\\n|\\s+[^\\s;]))",
                      "patterns": [
                        {
                          "include": "#separator-whitespace"
                        },
                        {
                          "include": "#line-continuation"
                        },
                        {
                          "name": "invalid.illegal.string.fish",
                          "match": "\\S+?(?=[\\s;&])"
                        }
                      ]
                    },
                    {
                      "begin": "(\\n)|(;)|(?=[#&|])",
                      "beginCaptures": {
                        "1": {
                          "name": "meta.function-call.operator.control.newline.fish"
                        },
                        "2": {
                          "name": "meta.function-call.operator.control.semicolon.fish keyword.operator.control.fish"
                        }
                      },
                      "end": "(?=end(?:$|[[^\\n\\S]\\n\\);&\\|<>]))",
                      "patterns": [
                        {
                          "include": "$self"
                        }
                      ]
                    },
                    {
                      "include": "#command-call-standard-block-if-internal"
                    }
                  ]
                },
                {
                  "include": "$self"
                }
              ]
            }
          ]
        }
      ]
    },
    "redirection": {
      "patterns": [
        {
          "begin": "(?=(?:[0-9]+(?:<|>>|>)|>>|\\^\\^|[<>^])\\&)",
          "end": "(?=[\\s);&|]|(?:[0-9]+(?:<|>>|>)|>>|\\^\\^|[<>^])(?![&<>^]))",
          "patterns": [
            {
              "begin": "(?:([0-9]+)(<|>>|>)|(>>|\\^\\^|[<>^]))(\\&)\\s*",
              "beginCaptures": {
                "0": {
                  "name": "meta.function-call.operator.redirection.fish"
                },
                "1": {
                  "name": "meta.string.unquoted.fish constant.numeric.file-descriptor.fish"
                },
                "2": {
                  "name": "keyword.operator.redirect.fish"
                },
                "3": {
                  "name": "keyword.operator.redirect.fish"
                },
                "4": {
                  "name": "keyword.operator.redirect.dereference.fish"
                }
              },
              "end": "([#&]\\S*)|(?![&\\\\])",
              "endCaptures": {
                "0": {
                  "name": "meta.function-call.operator.redirection.fish"
                },
                "1": {
                  "name": "invalid.illegal.file-descriptor.fish"
                }
              },
              "patterns": [
                {
                  "include": "#line-continuation"
                }
              ]
            },
            {
              "include": "#line-continuation"
            },
            {
              "name": "meta.function-call.operator.redirection.fish",
              "begin": "(?=\\()",
              "end": "(?!\\()",
              "patterns": [
                {
                  "include": "#command-substitution"
                }
              ]
            },
            {
              "name": "meta.function-call.operator.redirection.fish",
              "begin": "(?=\\$)",
              "end": "(?!\\$)",
              "patterns": [
                {
                  "include": "#variable-expansion"
                }
              ]
            },
            {
              "name": "meta.function-call.operator.redirection.fish",
              "begin": "(?=['\"])",
              "end": "(?!['\"])",
              "patterns": [
                {
                  "include": "#string-quoted"
                }
              ]
            },
            {
              "name": "meta.function-call.operator.redirection.file-descriptor.fish meta.string.unquoted.fish constant.numeric.file-descriptor.fish",
              "match": "(?:[0-9]+)(?=$|[\\s);&|<>])"
            },
            {
              "name": "meta.function-call.operator.redirection.file-descriptor.fish meta.string.unquoted.fish keyword.operator.redirect.close.fish",
              "match": "(?:-)(?=$|[\\s);&|<>])"
            },
            {
              "name": "meta.function-call.operator.redirection.fish invalid.illegal.file-descriptor.fish",
              "match": "(?:\\S+)"
            }
          ]
        },
        {
          "begin": "(?=(?:[0-9]+(?:<|>>|>)|>>|\\^\\^|[<>^])\\??)",
          "end": "(?=[\\s);&|]|(?:[0-9]+(?:<|>>|>)|>>|\\^\\^|[<>^])[&|])",
          "patterns": [
            {
              "begin": "(?:([0-9]+)(<|>>|>)|(>>|\\^\\^|[<>^]))(\\?)?\\s*",
              "beginCaptures": {
                "0": {
                  "name": "meta.function-call.operator.redirection.fish"
                },
                "1": {
                  "name": "meta.string.unquoted.fish constant.numeric.file-descriptor.fish"
                },
                "2": {
                  "name": "keyword.operator.redirect.fish"
                },
                "3": {
                  "name": "keyword.operator.redirect.fish"
                },
                "4": {
                  "name": "keyword.operator.redirect.clobber-test.fish"
                }
              },
              "end": "((?:[#&?]|[0-9]*[<>^])\\S*)|(?![&?<>^])",
              "endCaptures": {
                "0": {
                  "name": "meta.function-call.operator.redirection.fish"
                },
                "1": {
                  "name": "invalid.illegal.path.fish"
                }
              },
              "patterns": [
                {
                  "include": "#line-continuation"
                }
              ]
            },
            {
              "include": "#line-continuation"
            },
            {
              "name": "meta.function-call.operator.redirection.fish invalid.illegal.path.fish",
              "begin": "\\{|(?=\\})",
              "end": "[^\\n\\S]|[\\n\\);&\\|]|\\}"
            },
            {
              "name": "meta.function-call.operator.redirection.fish invalid.illegal.path.fish",
              "match": "[*?]\\S*"
            },
            {
              "name": "meta.function-call.operator.redirection.fish invalid.illegal.path.fish",
              "match": "[&?]|[0-9]*[<>^]\\S*"
            },
            {
              "name": "meta.function-call.operator.redirection.path.fish meta.string.unquoted.fish keyword.operator.tilde.fish",
              "match": "\\~"
            },
            {
              "name": "meta.function-call.operator.redirection.path.fish",
              "begin": "(?![\\s);&(|<>${}*?])",
              "end": "(?=[\\s);&(|<>${}*?])",
              "patterns": [
                {
                  "include": "#string-quoted"
                },
                {
                  "name": "meta.string.unquoted.fish",
                  "begin": "(?![\\s);&(|<>${}*?]|['\"])",
                  "end": "(?=[\\s);&(|<>${}*?]|['\"])",
                  "patterns": [
                    {
                      "include": "#string-unquoted-patterns-escapes"
                    }
                  ]
                }
              ]
            },
            {
              "name": "meta.function-call.operator.redirection.fish",
              "begin": "(?=\\()",
              "end": "(?!\\()",
              "patterns": [
                {
                  "include": "#command-substitution"
                }
              ]
            },
            {
              "name": "meta.function-call.operator.redirection.fish meta.string.unquoted",
              "begin": "(?=\\$)",
              "end": "(?!\\$)",
              "patterns": [
                {
                  "include": "#variable-expansion"
                }
              ]
            }
          ]
        }
      ]
    },
    "separator-whitespace": {
      "patterns": [
        {
          "name": "meta.function-call.fish",
          "match": "[^\\n\\S]+"
        }
      ]
    },
    "parameter": {
      "patterns": [
        {
          "include": "#parameter-option"
        },
        {
          "include": "#parameter-argument"
        }
      ]
    },
    "parameter-common": {
      "patterns": [
        {
          "include": "#command-substitution"
        },
        {
          "name": "meta.string.unquoted.fish",
          "begin": "(?=\\$)",
          "end": "(?!\\$)",
          "patterns": [
            {
              "include": "#variable-expansion"
            }
          ]
        },
        {
          "include": "#string"
        }
      ]
    },
    "parameter-option": {
      "patterns": [
        {
          "name": "meta.function-call.parameter.option.long.fish variable.parameter.fish",
          "begin": "(?=--)",
          "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
          "patterns": [
            {
              "name": "variable.parameter.fish",
              "begin": "--",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.option.long.begin.fish meta.string.unquoted.fish"
                }
              },
              "end": "(?=[[^\\n\\S]\\n\\);&\\|<>=])",
              "patterns": [
                {
                  "include": "#command-substitution"
                },
                {
                  "name": "meta.string.unquoted.fish",
                  "begin": "(?=\\$)",
                  "end": "(?!\\$)",
                  "patterns": [
                    {
                      "include": "#variable-expansion"
                    }
                  ]
                },
                {
                  "include": "#string-quoted"
                },
                {
                  "name": "meta.string.unquoted.fish",
                  "begin": "(?!['\"])",
                  "end": "(?=[[^\\n\\S]\\n\\);&\\|<>('\"$=])",
                  "patterns": [
                    {
                      "include": "#string-unquoted-contents"
                    }
                  ]
                }
              ]
            },
            {
              "name": "variable.parameter.fish punctuation.definition.option.long.separator.fish meta.string.unquoted.fish",
              "begin": "=",
              "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
              "patterns": [
                {
                  "name": "meta.string.unquoted.fish constant.numeric.fish",
                  "match": "(?:[+-]?[0-9]+\\.?[0-9]*|[+-]?[0-9]*\\.?[0-9]+)(?=$|[[^\\n\\S]\\n\\);&\\|<>])"
                },
                {
                  "include": "#parameter-common"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.function-call.parameter.option.short.fish variable.parameter.fish",
          "begin": "-(?=[^[^\\n\\S]\\n\\);&\\|<>])",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.option.short.fish meta.string.unquoted.fish"
            }
          },
          "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
          "patterns": [
            {
              "include": "#parameter-common"
            }
          ]
        }
      ]
    },
    "parameter-argument": {
      "patterns": [
        {
          "begin": "(?![[^\\n\\S]\\n\\);&\\|<>^])",
          "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
          "patterns": [
            {
              "match": "(\\%)[0-9]+(?=$|[[^\\n\\S]\\n\\);&\\|<>])",
              "captures": {
                "0": {
                  "name": "meta.function-call.parameter.argument.job-expansion.fish meta.string.unquoted.fish"
                },
                "1": {
                  "name": "punctuation.definition.job.fish"
                }
              }
            },
            {
              "match": "(\\%)(self)(?=$|[[^\\n\\S]\\n\\);&\\|<>])",
              "captures": {
                "0": {
                  "name": "meta.function-call.parameter.argument.process-expansion.self.fish meta.string.unquoted.fish"
                },
                "1": {
                  "name": "punctuation.definition.process.fish"
                },
                "2": {
                  "name": "variable.language.fish"
                }
              }
            },
            {
              "match": "(\\%)(last)(?=$|[[^\\n\\S]\\n\\);&\\|<>])",
              "captures": {
                "0": {
                  "name": "meta.function-call.parameter.argument.process-expansion.last.fish meta.string.unquoted.fish"
                },
                "1": {
                  "name": "punctuation.definition.process.fish"
                },
                "2": {
                  "name": "variable.language.fish"
                }
              }
            },
            {
              "name": "meta.function-call.parameter.argument.process-expansion.other.fish",
              "begin": "\\%",
              "beginCaptures": {
                "0": {
                  "name": "meta.string.unquoted.fish punctuation.definition.process.fish"
                }
              },
              "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
              "patterns": [
                {
                  "include": "#parameter-common"
                }
              ]
            },
            {
              "name": "meta.function-call.parameter.argument.numeric.fish meta.string.unquoted.fish constant.numeric.fish",
              "match": "(?:[+-]?[0-9]+\\.?[0-9]*|[+-]?[0-9]*\\.?[0-9]+)(?=$|[[^\\n\\S]\\n\\);&\\|<>])"
            },
            {
              "name": "meta.function-call.parameter.argument.path.fish",
              "begin": "(?![\\s($])",
              "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
              "patterns": [
                {
                  "name": "meta.string.unquoted.fish keyword.operator.tilde.fish",
                  "begin": "\\~",
                  "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
                  "patterns": [
                    {
                      "include": "#parameter-common"
                    }
                  ]
                },
                {
                  "include": "#parameter-common"
                }
              ]
            },
            {
              "name": "meta.function-call.parameter.argument.fish",
              "begin": "(?!\\s)",
              "end": "(?=[[^\\n\\S]\\n\\);&\\|<>])",
              "patterns": [
                {
                  "include": "#parameter-common"
                }
              ]
            }
          ]
        }
      ]
    },
    "command-substitution": {
      "patterns": [
        {
          "begin": "(?=(\\\\?\\$)?\\()",
          "end": "(?![\\(\\[])",
          "patterns": [
            {
              "match": "(\\\\)?(\\$)",
              "captures": {
                "0": {
                  "name": "meta.parens.command-substitution.dollar.fish"
                },
                "1": {
                  "name": "constant.character.escape.fish"
                },
                "2": {
                  "name": "punctuation.definition.variable.fish"
                }
              }
            },
            {
              "name": "meta.parens.command-substitution.fish",
              "begin": "\\(",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.parens.begin.fish"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.parens.end.fish"
                }
              },
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            {
              "include": "#index-expansion"
            }
          ]
        }
      ]
    },
    "variable-expansion": {
      "patterns": [
        {
          "include": "#variable-expansion-illegal"
        },
        {
          "include": "#variable-builtin"
        },
        {
          "name": "meta.variable-expansion.fish",
          "begin": "(?=\\$)",
          "end": "(?=[^\\$\\[])",
          "patterns": [
            {
              "include": "#variable-expansion-simple"
            },
            {
              "include": "#index-expansion"
            }
          ]
        }
      ]
    },
    "variable-expansion-simple": {
      "patterns": [
        {
          "name": "variable.other.fish",
          "begin": "\\$",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.variable.fish"
            }
          },
          "end": "(?=[^\\$\\w])(?!\\\\\\n)",
          "patterns": [
            {
              "name": "constant.character.escape.newline.fish",
              "match": "\\\\\\n"
            },
            {
              "include": "#variable-expansion-illegal"
            },
            {
              "include": "#variable-expansion-simple"
            }
          ]
        }
      ]
    },
    "variable-expansion-illegal": {
      "patterns": [
        {
          "name": "invalid.illegal.variable-expansion.fish",
          "match": "\\$(?:(?=[,'\"\\]}[^\\n\\S]\\n\\);&\\|<>])|[^\\$\\w][^$,'\"\\]}[^\\n\\S]\\n\\);&\\|<>]*)"
        }
      ]
    },
    "variable-builtin": {
      "patterns": [
        {
          "name": "variable.language.fish",
          "match": "(\\$)(PATH|CDPATH|FISH_DEBUG|FISH_DEBUG_OUTPUT|LANG|LC_(ALL|COLLATE|CTYPE|MESSAGES|MONETARY|NUMERIC)|fish_color_(normal|command|keyword|quote|redirection|end|error|param|valid_path|option|comment|selection|operator|escape|autosuggestion|cwd|cwd_root|user|host|host_remote|status|cancel|search_match)|fish_ambiguous_width|fish_emoji_width|fish_autosuggestion_enabled|fish_handle_reflow|fish_key_bindings|fish_escape_delay_ms|fish_greeting|fish_history|fish_trace|fish_user_paths|umask|BROWSER|_|argv|CMD_DURATION|COLUMNS|LINES|fish_kill_signal|fish_killring|fish_pid|history|HOME|hostname|IFS|last_pid|PWD|pipestatus|SHLVL|status|status_generation|USER|EUID|version|FISH_VERSION|__fish_bin_dir|__fish_config_dir|__fish_data_dir|__fish_help_dir|__fish_sysconf_dir|__fish_user_data_dir)\\b",
          "captures": {
            "1": {
              "name": "punctuation.definition.variable.fish"
            }
          }
        }
      ]
    },
    "index-expansion": {
      "patterns": [
        {
          "name": "meta.brackets.index-expansion.fish",
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.brackets.begin.fish"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.brackets.end.fish"
            }
          },
          "patterns": [
            {
              "name": "keyword.operator.range.fish",
              "match": "\\.\\."
            },
            {
              "include": "#command-substitution"
            },
            {
              "include": "#variable-expansion"
            },
            {
              "include": "#string-quoted"
            },
            {
              "name": "constant.numeric.fish",
              "match": "[+-]?[0-9]+(?=[[^\\n\\S]\\n\\);&\\|<>\\]]|\\.\\.)"
            },
            {
              "name": "invalid.illegal.index.fish",
              "match": "\\S"
            }
          ]
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "include": "#string-quoted"
        },
        {
          "include": "#string-unquoted"
        }
      ]
    },
    "string-quoted": {
      "patterns": [
        {
          "name": "string.quoted.single.fish",
          "begin": "\\'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.fish"
            }
          },
          "end": "\\'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.fish"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.fish",
              "match": "\\\\[\\'\\\\]"
            }
          ]
        },
        {
          "name": "string.quoted.double.fish",
          "begin": "\\\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.fish"
            }
          },
          "end": "\\\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.fish"
            }
          },
          "patterns": [
            {
              "include": "#string-quoted-contents"
            }
          ]
        }
      ]
    },
    "string-quoted-contents": {
      "patterns": [
        {
          "name": "constant.character.escape.fish",
          "match": "\\\\[\\n\\\"\\\\$]"
        },
        {
          "name": "string.interpolated.dollar.fish",
          "begin": "\\$\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.shell"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.shell"
            }
          },
          "patterns": [
            {
              "include": "#command-substitution"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "include": "#variable-expansion"
        }
      ]
    },
    "string-unquoted": {
      "patterns": [
        {
          "name": "meta.string.unquoted.fish",
          "begin": "(?![[^\\n\\S]\\n\\);&\\|<>('\"$])",
          "end": "(?=[[^\\n\\S]\\n\\);&\\|<>('\"$])",
          "patterns": [
            {
              "include": "#string-unquoted-contents"
            }
          ]
        }
      ]
    },
    "string-unquoted-contents": {
      "patterns": [
        {
          "include": "#string-unquoted-contents-escapes"
        },
        {
          "match": "(\\{)([^\\n\\S]+)(\\})",
          "captures": {
            "1": {
              "name": "meta.braces.literal.empty.fish"
            },
            "2": {
              "name": "meta.braces.literal.empty.ignored-whitespace.fish"
            },
            "3": {
              "name": "meta.braces.literal.empty.fish"
            }
          }
        },
        {
          "name": "meta.braces.literal.empty.fish",
          "match": "\\{\\}"
        },
        {
          "name": "meta.braces.literal.non-empty.fish",
          "begin": "\\{(?=[^,$\\{]+(?:\\n|\\\\\\n|\\}))",
          "end": "(\\})|(\\).*)",
          "endCaptures": {
            "1": {
              "name": "meta.braces.literal.non-empty.fish"
            },
            "2": {
              "name": "invalid.illegal.operator.fish"
            }
          },
          "patterns": [
            {
              "name": "meta.braces.literal.non-empty.ignored-whitespace.fish",
              "match": "\\s+"
            },
            {
              "name": "meta.braces.literal.non-empty.fish",
              "begin": "(?!\\s)",
              "end": "(?=[\\s\\}])|((?:[+-]?[0-9]+\\.?[0-9]*|[+-]?[0-9]*\\.?[0-9]+))(?=$|[\\s\\}])",
              "endCaptures": {
                "1": {
                  "name": "constant.numeric.fish"
                }
              },
              "patterns": [
                {
                  "include": "#command-substitution"
                },
                {
                  "include": "#variable-expansion"
                },
                {
                  "include": "#string-quoted"
                },
                {
                  "include": "#string-unquoted-contents"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.braces.brace-expansion.fish",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.braces.begin.fish"
            }
          },
          "end": "(\\})|(\\).*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.braces.end.fish"
            },
            "2": {
              "name": "invalid.illegal.punctuation.section.fish"
            }
          },
          "patterns": [
            {
              "name": "punctuation.section.braces.separator.fish",
              "match": "\\,"
            },
            {
              "name": "meta.braces.brace-expansion.ignored-whitespace.fish",
              "match": "\\s+"
            },
            {
              "include": "#command-substitution"
            },
            {
              "include": "#variable-expansion"
            },
            {
              "name": "invalid.illegal.whitespace.fish",
              "match": "(?:[^\\n\\S]+)"
            },
            {
              "include": "#string-quoted"
            },
            {
              "name": "constant.numeric.fish",
              "match": "(?:[+-]?[0-9]+\\.?[0-9]*|[+-]?[0-9]*\\.?[0-9]+)(?=$|[[^\\n\\S]\\n\\);&\\|<>]|\\}|\\,)"
            },
            {
              "begin": "(?![[^\\n\\S]\\n\\);&\\|<>'\"])",
              "end": "(?=[[^\\n\\S]\\n\\);&\\|<>'\"]|\\}|\\,)",
              "patterns": [
                {
                  "name": "constant.character.escape.fish",
                  "match": "\\\\\\,"
                },
                {
                  "include": "#string-unquoted-contents"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.wildcard-expansion.fish",
          "match": "(\\*\\*)|(\\*)|(\\?)",
          "captures": {
            "1": {
              "name": "keyword.operator.double-star.fish"
            },
            "2": {
              "name": "keyword.operator.single-star.fish"
            },
            "3": {
              "name": "keyword.operator.question-mark.fish"
            }
          }
        }
      ]
    },
    "string-unquoted-contents-escapes": {
      "patterns": [
        {
          "name": "constant.character.escape.fish",
          "match": "(?x)\n\\\\[abefnrtv $\\\\*?#(){}\\[\\]<>^&|;\"']\n|\n\\\\[~%]\n|\n\\\\[xX][0-9A-Fa-f]{1,2}\n|\n\\\\[0-7]{1,3}\n|\n\\\\u[0-9A-Fa-f]{1,4}\n|\n\\\\U[0-9A-Fa-f]{1,8}\n|\n\\\\c[?-~]"
        },
        {
          "name": "constant.character.escape.newline.fish",
          "match": "\\\\\\n"
        }
      ]
    }
  }
}
