<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>fish</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!.*\b(fish)\b</string>
	<key>name</key>
	<string>Friendly Interactive Shell (fish)</string>
	<key>foldingStartMarker</key>
	<string>^\s*(begin|else|for|function|if|case|while)\s.*$</string>
	<key>foldingStopMarker</key>
	<string>^\s*(end)\s*$</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#line-continuation</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\)|end</string>
			<key>end</key>
			<string>(?=[\s);&amp;|&lt;&gt;])</string>
			<key>name</key>
			<string>invalid.illegal.function-call.fish</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\&amp;</string>
			<key>name</key>
			<string>invalid.illegal.function-call.fish</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?=\S)</string>
			<key>end</key>
			<string>(\n)|([;&amp;])|(?=\)|#|end)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.function-call.operator.control.fish</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.function-call.operator.control.fish keyword.operator.control.fish</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#pipeline</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>argument</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?![\s);&amp;|&lt;&gt;^])</string>
					<key>end</key>
					<string>(?=[\s);&amp;|&lt;&gt;])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\%</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.string.unquoted.fish punctuation.definition.process.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=[\s);&amp;|&lt;&gt;])</string>
							<key>name</key>
							<string>meta.function-call.parameter.argument.process-expansion.fish</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>(?:self|last)(?=$|[\s);&amp;|&lt;&gt;])</string>
									<key>name</key>
									<string>meta.string.unquoted.fish variable.language.fish</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#parameter-patterns</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:[+-]?)(?:[0-9]+\.?[0-9]*|[0-9]*\.?[0-9]+)(?=$|[\s);&amp;|&lt;&gt;])</string>
							<key>name</key>
							<string>meta.function-call.parameter.argument.numeric.fish meta.string.unquoted.fish constant.numeric.fish</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?![\s($])</string>
							<key>end</key>
							<string>(?=[\s);&amp;|&lt;&gt;])</string>
							<key>name</key>
							<string>meta.function-call.parameter.argument.path.fish</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\~</string>
									<key>name</key>
									<string>meta.string.unquoted.fish keyword.operator.tilde.fish</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#parameter-patterns</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?!\s)</string>
							<key>end</key>
							<string>(?=[\s);&amp;|&lt;&gt;])</string>
							<key>name</key>
							<string>meta.function-call.parameter.argument.fish</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#parameter-patterns</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>command-call-meta</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
(builtin|command|exec)\b
(?# Look ahead for control operations after whitespace)
(?!\s*
  (?:
    (?# Find simple control operations)
    [\n)#;&amp;|]
  |
    (?# Find redirection, which may be into a pipe but we don't care)
    (?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?
  |
    (?# Find options)
    -
  )
)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.name.fish support.function.fish meta.string.unquoted.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?x)
(?# Look ahead for control operations after whitespace)
(?=\s*
  (?:
    (?# Find simple control operations)
    [\n)#;&amp;]
  |
    (?# Find piping)
    (?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)?\|
  )
)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#separator-whitespace</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#line-continuation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#command-call-standard</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=(not)\b(?!\s*[\n)#;-]))</string>
					<key>end</key>
					<string>(?=[\n)#;&amp;])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(not)\b(?!\s*[\n);-])</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.name.fish keyword.operator.word.fish meta.string.unquoted.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?![^\n\S]|\&amp;|\\\n)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#separator-whitespace</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\&amp;</string>
									<key>name</key>
									<string>invalid.illegal.function-call.fish</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#line-continuation</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#pipeline</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>command-call-standard</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=\S)</string>
					<key>end</key>
					<string>(?x)
(?# Look ahead for operators)
(?=
  (?:
    (?# Find a control operator)
    [\n)#;&amp;]
  |
    (?# Find a pipe operator)
    (?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)?\|
  )
)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?![\s&lt;&gt;^%])</string>
							<key>end</key>
							<string>(?=[\s);&amp;|&lt;&gt;])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#command-call-standard-block</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>\[(?=[\s&lt;&gt;]|\\\n)</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>meta.function-call.name.fish support.function.test.begin.fish</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(\])|(\n|[;&amp;)|].*)</string>
									<key>endCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>meta.function-call.name.fish support.function.test.end.fish</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>invalid.illegal.function-call.fish</string>
										</dict>
									</dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#separator-whitespace</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#line-continuation</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#parameter</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#redirection</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(?:break|continue|return)(?=[\s);&amp;|&lt;&gt;])</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?!\s)</string>
									<key>end</key>
									<string>(?=[\s);&amp;|&lt;&gt;])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>(?=\()</string>
											<key>end</key>
											<string>(?=[\s);&amp;|&lt;&gt;])</string>
											<key>name</key>
											<string>invalid.illegal.function-call.fish</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>begin</key>
													<string>\(</string>
													<key>end</key>
													<string>\)|(?=[\n);&amp;|&lt;&gt;])</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?!\s)</string>
											<key>end</key>
											<string>(?=[\s);&amp;(|&lt;&gt;])</string>
											<key>name</key>
											<string>meta.function-call.name.fish variable.function.fish</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>match</key>
													<string>\$</string>
													<key>name</key>
													<string>meta.string.unquoted.fish</string>
												</dict>
												<dict>
													<key>include</key>
													<string>#string</string>
												</dict>
											</array>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>\%</string>
							<key>end</key>
							<string>(?=[\s);&amp;|&lt;&gt;])</string>
							<key>name</key>
							<string>invalid.illegal.function-call.fish</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#redirection</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=[^\n\S]+)</string>
							<key>end</key>
							<string>(?x)
(?# Look ahead for operators)
(?=
  (?:
    (?# Find a control operator)
    [\n)#;&amp;]
  |
    (?# Find a pipe operator)
    (?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)?\|
  )
)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(?!--[\s);&amp;|&lt;&gt;])</string>
									<key>end</key>
									<string>(?x)
(?# Look ahead for operators or the end of options)
(?=
  (?:
    (?# Find a control operator)
    [\n)#;&amp;]
  |
    (?# Find a pipe operator)
    (?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)?\|
  |
    (?# Find a double hyphen)
    --[\s);&amp;|&lt;&gt;]
  )
)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#separator-whitespace</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#line-continuation</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#redirection</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#parameter</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?=--[\s);&amp;|&lt;&gt;])</string>
									<key>end</key>
									<string>(?x)
(?# Look ahead for operators)
(?=
  (?:
    (?# Find a control operator)
    [\n)#;&amp;]
  |
    (?# Find a pipe operator)
    (?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)?\|
  )
)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>(?=--[\s);&amp;|&lt;&gt;])</string>
											<key>end</key>
											<string>(?=[\s);&amp;|&lt;&gt;])</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#parameter</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?=\s)</string>
											<key>end</key>
											<string>(?x)
(?# Look ahead for operators)
(?=
  (?:
    (?# Find a control operator)
    [\n)#;&amp;]
  |
    (?# Find a pipe operator)
    (?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)?\|
  )
)</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#separator-whitespace</string>
												</dict>
												<dict>
													<key>include</key>
													<string>#line-continuation</string>
												</dict>
												<dict>
													<key>include</key>
													<string>#redirection</string>
												</dict>
												<dict>
													<key>include</key>
													<string>#argument</string>
												</dict>
											</array>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>command-call-standard-block</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.name.fish variable.function.fish meta.string.unquoted.fish</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.operator.fish</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(begin|while|if|for|switch|function)\s*([&amp;|&lt;&gt;])</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.name.fish variable.function.fish meta.string.unquoted.fish</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.operator.fish</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(begin)\s*(\))</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>begin(?=\s*$|\s*[\n;]|\s+[^\s-])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>end(?=$|[\s);&amp;|&lt;&gt;])</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.begin.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=while\s+[^\s)#;-])</string>
					<key>end</key>
					<string>end(?=$|[\s);&amp;|&lt;&gt;])</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.while.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>while</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=[\n);&amp;])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#line-continuation</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#pipeline</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\n)|(;)|(?=[)&amp;])</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.control.fish</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.control.fish keyword.operator.control.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=end(?:$|[\s);&amp;|&lt;&gt;]))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=if\s+[^\s)#;-])</string>
					<key>end</key>
					<string>end(?=$|[\s);&amp;|&lt;&gt;])</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.if.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#command-call-standard-block-if-internal</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=for\s+[^\s)#;-])</string>
					<key>end</key>
					<string>end(?=$|[\s);&amp;|&lt;&gt;])</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.for-in.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(for)(\s+)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\s+</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.fish</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#line-continuation</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#parameter</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\S+</string>
									<key>name</key>
									<string>invalid.illegal.operator.fish</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#line-continuation</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>in(?=\s)</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=[\n)#;&amp;])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#separator-whitespace</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#line-continuation</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#argument</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\n)|(;)|(?=[)#&amp;])</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.control.fish</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.control.fish keyword.operator.control.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=end(?:$|[\s);&amp;|&lt;&gt;]))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>match</key>
							<string>\S+?(?=[\s);&amp;])</string>
							<key>name</key>
							<string>invalid.illegal.function-call.fish</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#separator-whitespace</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=switch\s+[^\s)#;-])</string>
					<key>end</key>
					<string>end(?=$|[\s);&amp;|&lt;&gt;])</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.switch.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=switch)</string>
							<key>end</key>
							<string>(?=[\n);&amp;])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(switch)(\s+)</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>meta.function-call.fish</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=[\s);&amp;])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#line-continuation</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#parameter</string>
										</dict>
										<dict>
											<key>match</key>
											<string>\S+</string>
											<key>name</key>
											<string>invalid.illegal.operator.fish</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>\s+</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>meta.function-call.fish</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=[\n);&amp;])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>\S+?(?=[\s);&amp;])</string>
											<key>name</key>
											<string>invalid.illegal.string.fish</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\n)|(;)|(?=[)&amp;])</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.control.fish</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.control.fish keyword.operator.control.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=end(?:$|[\s);&amp;|&lt;&gt;]))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>case(?=[\s);&amp;])</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(\n)|(;)|(?=[)#&amp;|]|(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)</string>
									<key>endCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>meta.function-call.operator.control.fish</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>meta.function-call.operator.control.fish keyword.operator.control.fish</string>
										</dict>
									</dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#separator-whitespace</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#line-continuation</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#argument</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=function\s+[^\s)#;-])</string>
					<key>end</key>
					<string>end(?=$|[\s);&amp;|&lt;&gt;])</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.function.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=function)</string>
							<key>end</key>
							<string>(?x)
(?# Look ahead for operators)
(?=
  (?:
    (?# Find a control operator)
    [\n)#;&amp;|]
  |
    (?# Find a redirect or pipe operator)
    (?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)
  )
)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(function)\s+</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>meta.function-call.name.fish</string>
										</dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.control.conditional.fish meta.string.unquoted.fish</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=[\s);&amp;|&lt;&gt;])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#line-continuation</string>
										</dict>
										<dict>
											<key>begin</key>
											<string>[|&lt;&gt;]</string>
											<key>end</key>
											<string>(?=[\s);&amp;])</string>
											<key>name</key>
											<string>invalid.illegal.string.fish</string>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?!\\\n)</string>
											<key>end</key>
											<string>(?=[\s);&amp;|&lt;&gt;])</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>begin</key>
													<string>(?![\s)])</string>
													<key>end</key>
													<string>(?=[\s);&amp;|&lt;&gt;])</string>
													<key>name</key>
													<string>meta.function-call.parameter.argument.fish entity.name.function.fish</string>
													<key>patterns</key>
													<array>
														<dict>
															<key>include</key>
															<string>#parameter-patterns</string>
														</dict>
													</array>
												</dict>
											</array>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?=[^\n\S])</string>
									<key>end</key>
									<string>(?x)
(?# Look ahead for operators)
(?=
  (?:
    (?# Find a control operator)
    [\n)#;&amp;|]
  |
    (?# Find a redirect or pipe operator)
    (?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)
  )
)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#separator-whitespace</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#line-continuation</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#parameter</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\n)|(;)|(?=[)#&amp;|]|(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.control.fish</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.control.fish keyword.operator.control.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=end(?:$|[\s);&amp;|&lt;&gt;]))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>command-call-standard-block-if-internal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=if(?:\s*\n|\s+[^\s;]))</string>
					<key>end</key>
					<string>(?=end(?:$|[\s);&amp;|&lt;&gt;]))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>if</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=[\n#;&amp;])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#line-continuation</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#pipeline</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\n)|(;)|(?=[#&amp;])</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.control.fish</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.control.fish keyword.operator.control.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=end(?:$|[\s);&amp;|&lt;&gt;]))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(?=else\s*[\s;])</string>
									<key>end</key>
									<string>(?=end(?:$|[\s);&amp;|&lt;&gt;]))</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>begin</key>
											<string>else(?=\s*[\s;])</string>
											<key>beginCaptures</key>
											<dict>
												<key>0</key>
												<dict>
													<key>name</key>
													<string>meta.function-call.name.fish keyword.control.conditional.fish meta.string.unquoted.fish</string>
												</dict>
											</dict>
											<key>end</key>
											<string>(?=[\n#;&amp;]|if(?:\s*\n|\s+[^\s;]))</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#separator-whitespace</string>
												</dict>
												<dict>
													<key>include</key>
													<string>#line-continuation</string>
												</dict>
												<dict>
													<key>match</key>
													<string>\S+?(?=[\s;&amp;])</string>
													<key>name</key>
													<string>invalid.illegal.string.fish</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>begin</key>
											<string>(\n)|(;)|(?=[#&amp;])</string>
											<key>beginCaptures</key>
											<dict>
												<key>1</key>
												<dict>
													<key>name</key>
													<string>meta.function-call.operator.control.fish</string>
												</dict>
												<key>2</key>
												<dict>
													<key>name</key>
													<string>meta.function-call.operator.control.fish keyword.operator.control.fish</string>
												</dict>
											</dict>
											<key>end</key>
											<string>(?=end(?:$|[\s);&amp;|&lt;&gt;]))</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>$self</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#command-call-standard-block-if-internal</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>command-substitution</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=\()</string>
					<key>end</key>
					<string>(?![\(\[])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.parens.begin.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\)</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.parens.end.fish</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.parens.command-substitution.fish</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#index-expansion</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>index-expansion</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.brackets.begin.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.brackets.end.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.brackets.index-expansion.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\.\.</string>
							<key>name</key>
							<string>keyword.operator.range.fish</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#command-substitution</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable-expansion</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string-quoted</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:[+-]?[0-9]+)(?=[\s);&amp;|&lt;&gt;]|\]|\.\.)</string>
							<key>name</key>
							<string>constant.numeric.fish</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\S</string>
							<key>name</key>
							<string>invalid.illegal.index.fish</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>line-continuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=\\\n)</string>
					<key>end</key>
					<string>(?=\n)|^(?![\s\#\\])|\s(?![\s\#])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\\n</string>
							<key>name</key>
							<string>constant.character.escape.newline</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>parameter</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?![\s);&amp;|&lt;&gt;^])</string>
					<key>end</key>
					<string>(?=[\s);&amp;|&lt;&gt;])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?:--)(?=[\s);&amp;|&lt;&gt;])</string>
							<key>name</key>
							<string>meta.function-call.parameter.option.end.fish variable.parameter.fish punctuation.definition.option.end.fish meta.string.unquoted.fish</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=--)</string>
							<key>end</key>
							<string>(?=[\s);&amp;|&lt;&gt;])</string>
							<key>name</key>
							<string>meta.function-call.parameter.option.long.fish</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(?:--)</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.option.long.begin.fish meta.string.unquoted.fish</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=[\s);&amp;|&lt;&gt;]|=)</string>
									<key>name</key>
									<string>variable.parameter.fish</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#command-substitution</string>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?=\$)</string>
											<key>end</key>
											<string>(?!\$)</string>
											<key>name</key>
											<string>meta.string.unquoted.fish</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#variable-expansion</string>
												</dict>
											</array>
										</dict>
										<dict>
											<key>include</key>
											<string>#string-quoted</string>
										</dict>
										<dict>
											<key>begin</key>
											<string>(?!['"])</string>
											<key>end</key>
											<string>(?=[\s);&amp;(|&lt;&gt;'"$]|\=)</string>
											<key>name</key>
											<string>meta.string.unquoted.fish</string>
											<key>patterns</key>
											<array>
												<dict>
													<key>include</key>
													<string>#string-unquoted-patterns</string>
												</dict>
											</array>
										</dict>
									</array>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?:=)</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>variable.parameter.fish punctuation.definition.option.long.separator.fish meta.string.unquoted.fish</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=[\s);&amp;|&lt;&gt;])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>(?:[+-]?)(?:[0-9]+\.?[0-9]*|[0-9]*\.?[0-9]+)(?=$|[\s);&amp;|&lt;&gt;])</string>
											<key>name</key>
											<string>meta.string.unquoted.fish constant.numeric.fish</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#parameter-patterns</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?:-)(?=[^\s);&amp;|&lt;&gt;])</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.option.short.fish meta.string.unquoted.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=[\s);&amp;|&lt;&gt;])</string>
							<key>name</key>
							<string>meta.function-call.parameter.option.short.fish variable.parameter.fish</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#parameter-patterns</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#argument</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>parameter-patterns</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#command-substitution</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\$)</string>
					<key>end</key>
					<string>(?!\$)</string>
					<key>name</key>
					<string>meta.string.unquoted.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable-expansion</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
			</array>
		</dict>
		<key>pipeline</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=(and|or)\b(?!\s*[\n)#;-]))</string>
					<key>end</key>
					<string>(?=[\n)#;&amp;])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(and|or)\b(?!\s*[\n);-])</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.name.fish keyword.operator.word.fish meta.string.unquoted.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?![^\n\S]|\&amp;|\\\n)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#separator-whitespace</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\&amp;</string>
									<key>name</key>
									<string>invalid.illegal.function-call.fish</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#line-continuation</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#pipeline</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#pipeline-segment</string>
				</dict>
			</array>
		</dict>
		<key>pipeline-segment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=[&amp;|]|(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)</string>
					<key>end</key>
					<string>(?x)
(?# Look ahead to ensure no more operators after whitespace)
(?=\n)
|
(?!
  \s*
  (?:
    (?# Find a control operator)
    [\n);&amp;|]
  |
    (?# Find a pipe operator)
    (?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?
  )
)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?:[&amp;|]|(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)</string>
							<key>name</key>
							<string>invalid.illegal.function-call.fish</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:case|else|end)(?=[\s);&amp;|&lt;&gt;])</string>
					<key>name</key>
					<string>invalid.illegal.function-call.fish</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[^\s#])</string>
					<key>end</key>
					<string>(?=[\n)#;&amp;])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?x)
(?# Negative lookahead for whitespace, comments, piping)
(?!
  \s|\#|(?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)?\|
)</string>
							<key>end</key>
							<string>(?x)
(?# Look ahead for operators after whitespace)
(?=\s*
  (?:
    (?# Find a control operator)
    [\n)#;&amp;]
  |
    (?# Find a pipe operator)
    (?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)?\|
  )
)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#command-call-meta</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#command-call-standard</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?x)
(?# Look ahead for piping)
(?=
  (?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)?\|
)</string>
							<key>end</key>
							<string>(?=[\n)#;&amp;])</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>(?:(?:[0-9]+)?(?:&lt;|&gt;&gt;?)|\^\^?)?\|(?=\s*(?:$|[\n)#;&amp;]))</string>
									<key>name</key>
									<string>invalid.illegal.operator.fish</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?:([0-9]+)?(&lt;|&gt;&gt;?)|(\^\^?))?(\|)</string>
									<key>captures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>meta.function-call.operator.pipe.fish</string>
										</dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>constant.numeric.file-descriptor.fish</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.pipe.redirect.fish</string>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.pipe.redirect.fish</string>
										</dict>
										<key>4</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.pipe.fish</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=[\n)#;&amp;])</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>match</key>
											<string>(and|or)\b(?!\s*[\n;-])</string>
											<key>name</key>
											<string>invalid.illegal.function-call.fish</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#separator-whitespace</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#line-continuation</string>
										</dict>
										<dict>
											<key>include</key>
											<string>#pipeline-segment</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>redirection</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=(?:[0-9]+(?:&lt;|&gt;&gt;|&gt;)|&gt;&gt;|\^\^|[&lt;&gt;^])\&amp;)</string>
					<key>end</key>
					<string>(?=[\s);&amp;|]|(?:[0-9]+(?:&lt;|&gt;&gt;|&gt;)|&gt;&gt;|\^\^|[&lt;&gt;^])(?![&amp;&lt;&gt;^]))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?:([0-9]+)(&lt;|&gt;&gt;|&gt;)|(&gt;&gt;|\^\^|[&lt;&gt;^]))(\&amp;)\s*</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.redirection.fish</string>
								</dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.string.unquoted.fish constant.numeric.file-descriptor.fish</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.redirect.fish</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.redirect.fish</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.redirect.dereference.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>([#&amp;]\S*)|(?![&amp;\\])</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.redirection.fish</string>
								</dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>invalid.illegal.file-descriptor.fish</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#line-continuation</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#line-continuation</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=\()</string>
							<key>end</key>
							<string>(?!\()</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.fish</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#command-substitution</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=\$)</string>
							<key>end</key>
							<string>(?!\$)</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.fish</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#variable-expansion</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=['"])</string>
							<key>end</key>
							<string>(?!['"])</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.fish</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#string-quoted</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:[0-9]+)(?=$|[\s);&amp;|&lt;&gt;])</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.file-descriptor.fish meta.string.unquoted.fish constant.numeric.file-descriptor.fish</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:-)(?=$|[\s);&amp;|&lt;&gt;])</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.file-descriptor.fish meta.string.unquoted.fish keyword.operator.redirect.close.fish</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:\S+)</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.fish invalid.illegal.file-descriptor.fish</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=(?:[0-9]+(?:&lt;|&gt;&gt;|&gt;)|&gt;&gt;|\^\^|[&lt;&gt;^])\??)</string>
					<key>end</key>
					<string>(?=[\s);&amp;|]|(?:[0-9]+(?:&lt;|&gt;&gt;|&gt;)|&gt;&gt;|\^\^|[&lt;&gt;^])[&amp;|])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?:([0-9]+)(&lt;|&gt;&gt;|&gt;)|(&gt;&gt;|\^\^|[&lt;&gt;^]))(\?)?\s*</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.redirection.fish</string>
								</dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.string.unquoted.fish constant.numeric.file-descriptor.fish</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.redirect.fish</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.redirect.fish</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.redirect.clobber-test.fish</string>
								</dict>
							</dict>
							<key>end</key>
							<string>((?:[#&amp;?]|[0-9]*[&lt;&gt;^])\S*)|(?![&amp;?&lt;&gt;^])</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.function-call.operator.redirection.fish</string>
								</dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>invalid.illegal.path.fish</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#line-continuation</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#line-continuation</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\{|(?=\})</string>
							<key>end</key>
							<string>[\s);&amp;|}]</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.fish invalid.illegal.path.fish</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[*?]</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.fish invalid.illegal.path.fish</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:[&amp;?]|[0-9]*[&lt;&gt;^]).*$</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.fish invalid.illegal.path.fish</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\~</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.path.fish meta.string.unquoted.fish keyword.operator.tilde.fish</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?![\s);&amp;(|&lt;&gt;${}*?])</string>
							<key>end</key>
							<string>(?=[\s);&amp;(|&lt;&gt;${}*?])</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.path.fish</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#string-quoted</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(?![\s);&amp;(|&lt;&gt;${}*?]|['"])</string>
									<key>end</key>
									<string>(?=[\s);&amp;(|&lt;&gt;${}*?]|['"])</string>
									<key>name</key>
									<string>meta.string.unquoted.fish</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#string-unquoted-patterns-escapes</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=\()</string>
							<key>end</key>
							<string>(?!\()</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.fish</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#command-substitution</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=\$)</string>
							<key>end</key>
							<string>(?!\$)</string>
							<key>name</key>
							<string>meta.function-call.operator.redirection.fish meta.string.unquoted</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#variable-expansion</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>separator-whitespace</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?:[^\n\S]+)</string>
					<key>name</key>
					<string>meta.function-call.fish</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-unquoted</string>
				</dict>
			</array>
		</dict>
		<key>string-quoted</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\[\'\\]</string>
							<key>name</key>
							<string>constant.character.escape.fish</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\[\n\"\\$]</string>
							<key>name</key>
							<string>constant.character.escape.fish</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable-expansion</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string-unquoted</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?![\s);&amp;(|&lt;&gt;'"$])</string>
					<key>end</key>
					<string>(?=[\s);&amp;(|&lt;&gt;'"$])</string>
					<key>name</key>
					<string>meta.string.unquoted.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-unquoted-patterns</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string-unquoted-patterns</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-unquoted-patterns-escapes</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.braces.begin.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})|(\n|[;&amp;)|].*)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.braces.end.fish</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.punctuation.section.fish</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.braces.brace-expansion.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\,</string>
							<key>name</key>
							<string>punctuation.section.braces.separator.fish</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#command-substitution</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable-expansion</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:[^\n\S]+)</string>
							<key>name</key>
							<string>invalid.illegal.whitespace.fish</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string-quoted</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:[+-]?)(?:[0-9]+\.?[0-9]*|[0-9]*\.?[0-9]+)(?=$|[\s);&amp;|&lt;&gt;]|\}|\,)</string>
							<key>name</key>
							<string>constant.numeric.fish</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?![\s);&amp;|&lt;&gt;'"])</string>
							<key>end</key>
							<string>(?=[\s);&amp;|&lt;&gt;'"]|\}|\,)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\\\,</string>
									<key>name</key>
									<string>constant.character.escape.fish</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#string-unquoted-patterns</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.double-star.fish</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.single-star.fish</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.question-mark.fish</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\*\*)|(\*)|(\?)</string>
					<key>name</key>
					<string>meta.wildcard-expansion.fish</string>
				</dict>
			</array>
		</dict>
		<key>string-unquoted-patterns-escapes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)
\\[abefnrtv $\\*?#(){}\[\]&lt;&gt;^&amp;|;"']
|
\\[~%]
|
\\[xX][0-9A-Fa-f]{1,2}
|
\\[0-7]{1,3}
|
\\u[0-9A-Fa-f]{1,4}
|
\\U[0-9A-Fa-f]{1,8}
|
\\c[?-~]</string>
					<key>name</key>
					<string>constant.character.escape.fish</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-unquoted-patterns-escapes-newline</string>
				</dict>
			</array>
		</dict>
		<key>string-unquoted-patterns-escapes-newline</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\n</string>
					<key>name</key>
					<string>constant.character.escape.newline.fish</string>
				</dict>
			</array>
		</dict>
		<key>variable-expansion</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variable-expansion-illegal</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\$)</string>
					<key>end</key>
					<string>(?=[^\$\[])</string>
					<key>name</key>
					<string>meta.variable-expansion.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable-expansion-simple</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#index-expansion</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variable-expansion-illegal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\$(?:(?=[,'"\]}\s);&amp;|])|[^\w\$][^$,'"\]}\s);&amp;|]*)</string>
					<key>name</key>
					<string>invalid.illegal.variable-expansion.fish</string>
				</dict>
			</array>
		</dict>
		<key>variable-expansion-simple</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\$</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.fish</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[^\$\w])(?!\\\n)</string>
					<key>name</key>
					<string>variable.other.fish</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-unquoted-patterns-escapes-newline</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable-expansion-illegal</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable-expansion-simple</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.shell.fish</string>
	<key>uuid</key>
	<string>f9278d07-f7c1-4a9b-9581-ebcbc050fbfb</string>
</dict>
</plist>
